>>> # Create a new dict called d
... 
>>> d = {'test key': 'test value'}
>>> 
>>> 
>>> 
>>> # What attributes are on our dict?
... 
>>> dir(d)
['__class__', '__cmp__', '__contains__', '__delattr__', '__delitem__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'has_key', 'items', 'iteritems', 'iterkeys', 'itervalues', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values', 'viewitems', 'viewkeys', 'viewvalues']
>>> 
>>> 
>>> 
>>> # str function calls __str__ method
... 
>>> d
{'test key': 'test value'}
>>> str(d)
"{'test key': 'test value'}"
>>> d.__str__()
"{'test key': 'test value'}"
>>> 
>>> 
>>> 
>>> # [] operator calls __getitem__ method
... 
>>> d['test key']
'test value'
>>> d.__getitem__
<built-in method __getitem__ of dict object at 0xb7201acc>
>>> d.__getitem__('test key')
'test value'
>>> 
>>> 
>>> 
>>> # getattr function calls __getattribute__ method
... 
>>> d.keys()
['test key']
>>> getattr(d, 'keys')
<built-in method keys of dict object at 0xb7201acc>
>>> getattr(d, 'keys')()
['test key']
>>> d.__getattribute__('keys')
<built-in method keys of dict object at 0xb7201acc>
>>> d.__getattribute__('keys')()
['test key']
>>> 
>>> 
>>> 
>>> # __doc__ is assigned to the docstring automatically
... 
>>> d.__doc__
"dict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
